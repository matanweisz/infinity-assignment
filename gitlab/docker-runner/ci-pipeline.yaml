---
stages:
  - build
  - test
  - deploy

variables:
  IMAGE: $CI_REGISTRY_IMAGE
  TAG: $CI_COMMIT_SHORT_SHA
  DOCKER_IMAGE_TAG: "${IMAGE}:${TAG}"

# Build Stage: builds Docker image and pushes to registry with the build tag
build:
  stage: build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: ["--tls=false"]  # Disable TLS
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    # Install necessary tools for Vault authentication
    - apk add --no-cache curl jq
    # Set Vault Instance private IP for internal access
    - export VAULT_ADDR="http://10.0.3.136:8200"
    # Authenticate to Vault with AppRole
    - echo "Authenticating to Vault..."
    - |
      VAULT_TOKEN=$(curl --fail --silent --request POST \
        --data '{"role_id":"'$VAULT_ROLE_ID'", "secret_id":"'$VAULT_SECRET_ID'"}' \
        "$VAULT_ADDR/v1/auth/approle/login" | jq -r '.auth.client_token') || {
          echo "Failed to authenticate with Vault"
          exit 1
        }
    # Retrieve secret
    - echo "Retrieving secret from Vault..."
    - |
      SECRET_VALUE=$(curl --fail --silent --header "X-Vault-Token: $VAULT_TOKEN" \
        "$VAULT_ADDR/v1/secret/data/project-secret" | jq -r '.data.data.Assignment') || {
          echo "Failed to retrieve secret from Vault"
          exit 1
        }
    - echo "Secret pulled successfully from Vault"
    - export SECRET_VALUE
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - echo "Building Docker image..."
    - docker build --build-arg ASSIGNMENT_SECRET="$SECRET_VALUE" -t "${IMAGE}:build" .
    - echo "Pushing Docker image to registry..."
    - docker push "${IMAGE}:build"

# Test Stage: pull the build tagged image and test the /health endpoint + tag it
test:
  stage: test
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - apk add --no-cache curl
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker pull "${IMAGE}:build"
    
    # Run container and test health endpoint
    - docker run -d --rm -p 3000:3000 --name test-webapp "${IMAGE}:build"
    - |
      echo "Running health check..."
      for i in {1..12}; do
        if curl -f http://127.0.0.1:3000/health; then
          echo "Health check passed"
          break
        fi
        [ $i -eq 12 ] && echo "Health check failed" && docker logs test-container && exit 1
        sleep 5
      done
    
    # Tag and push tested images
    - docker tag "${IMAGE}:build" "${IMAGE}:latest"
    - docker tag "${IMAGE}:build" "${DOCKER_IMAGE_TAG}"
    - docker push "${IMAGE}:latest"
    - docker push "${DOCKER_IMAGE_TAG}"
  
  after_script:
    - docker stop test-webapp || true

# Deploy Stage: trigger the deployment of the Helm chart from the helm-charts repository
trigger-cd:
  stage: deploy
  trigger:
    project: matanweisz/helm-charts
    branch: main
    strategy: depend
    forward:
      pipeline_variables: true
  variables:
    WEBAPP_TAG: ${TAG}
